[project]
authors = [{ name = "Demin Vadim", email = "demin02vadim@gmail.com" }]
keywords = ["dataclasses", "serializer", "deserializer", "dacite", "json"]
name = "rich-dataclass"
version = "0.0.1"
description = "Lightweight library for simple dataclass serialization and deserialization to dict and JSON."
readme = "README.md"
requires-python = ">=3.10,<4.0"
dependencies = ["dacite>=1.9.2"]

[project.urls]
"Issue Tracker" = "https://github.com/Rub1kCube/rich-dataclass/issues?q=is%3Aissue%20state%3Aopen%20sort%3Acreated-desc"
homepage = "https://github.com/Rub1kCube/rich-dataclass"
repository = "https://github.com/Rub1kCube/rich-dataclass"

[project.optional-dependencies]
json-backend = ["orjson>=3.11.3", "simplejson>=3.20.1", "ujson>=5.11.0"]

[dependency-groups]
lint = [
  "ruff>=0.0.290",
  "codespell>=2.2.5",
  "mypy>=1.5.1",
  "pyright>=1.1.405",
  "pre-commit>=4.3.0",
]
test = ["pytest>=8.4.2", "pytest-randomly>=4.0.1"]

[tool.uv]
default-groups = ["lint", "test"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.uv.sources]
rich_dataclass = { workspace = true }

[tool.mypy]
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_return_any = true
strict = true
disallow_untyped_decorators = true
disallow_any_generics = false
implicit_reexport = false
show_error_codes = true

[tool.ruff]
line-length = 120
src = ["rich_dataclass", "tests"]
target-version = "py310"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "A003",   # flake8-builtins - class attribute {name} is shadowing a python builtin
  "ANN401", # Dynamically typed expressions (typing.Any)
  "B010",   # flake8-bugbear - do not call setattr with a constant attribute value
  "COM812", # conflict with formatter
  "D100",   # pydocstyle - missing docstring in public module
  "D101",   # pydocstyle - missing docstring in public class
  "D102",   # pydocstyle - missing docstring in public method
  "D103",   # pydocstyle - missing docstring in public function
  "D104",   # pydocstyle - missing docstring in public package
  "D105",   # pydocstyle - missing docstring in magic method
  "D106",   # pydocstyle - missing docstring in public nested class
  "D107",   # pydocstyle - missing docstring in __init__
  "D202",   # pydocstyle - no blank lines allowed after function docstring
  "D205",   # pydocstyle - 1 blank line required between summary line and description
  "D212",   # pydocstyle - multi-line docstring summary should start at the first line
  "D415",   # pydocstyle - first line should end with a period, question mark, or exclamation point
  "E501",   # pycodestyle line too long, handled by black
  "FBT001", # flake8-boolean-trap Boolean-typed positional argument in function definition
  "FBT002", # flake8-boolean-trap Boolean default positional argument in function definition
  "ISC001", # conflict with formatter
  "N818",   # pep8-naming - exception name should be named with an Error suffix
  "PYI019", # Use `Self` instead of custom TypeVar
  "S311",   # flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
  "UP037",  # pyupgrade - removes quotes from type annotation
]

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = ["types"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
section-order = [
  "future",
  "standard-library",
  "first-party",
  "third-party",
  "local-folder",
]
lines-after-imports = 2
